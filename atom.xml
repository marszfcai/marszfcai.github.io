<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marszfcai.github.io</id>
    <title>Marszfcai</title>
    <updated>2020-08-10T13:01:55.859Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://marszfcai.github.io"/>
    <link rel="self" href="https://marszfcai.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://marszfcai.github.io/images/avatar.png</logo>
    <icon>https://marszfcai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Marszfcai</rights>
    <entry>
        <title type="html"><![CDATA[如何查看java进程]]></title>
        <id>https://marszfcai.github.io/post/check-java-pid</id>
        <link href="https://marszfcai.github.io/post/check-java-pid">
        </link>
        <updated>2019-12-22T03:51:44.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h4 id="linux">Linux</h4>
<ul>
<li>ps -ef|grep java</li>
<li>jps -l</li>
</ul>
<h4 id="windows">Windows</h4>
<ul>
<li>jps -l</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解析binlog 常用命令]]></title>
        <id>https://marszfcai.github.io/post/binlog-common-command</id>
        <link href="https://marszfcai.github.io/post/binlog-common-command">
        </link>
        <updated>2019-12-21T04:37:43.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h3 id="一-mysql命令sql">一、MySQL命令（sql）</h3>
<h4 id="查看是否开启binlog">查看是否开启binlog</h4>
<pre><code class="language-sql">SHOW VARIABLES LIKE 'log_bin'; -- ON为开启
</code></pre>
<h4 id="查看binlog存放位置">查看binlog存放位置</h4>
<pre><code class="language-sql">SHOW VARIABLES LIKE 'datadir';
-- 或者由 `my.cnf` / `my.ini` 文件指定
-- log-bin=/usr/logs/mysql-bin
</code></pre>
<h4 id="查看binlog日志列表">查看binlog日志列表</h4>
<pre><code class="language-sql">SHOW MASTER logs;
</code></pre>
<h3 id="二-使用mysqlbinlog工具解析shell">二、使用mysqlbinlog工具解析（shell）</h3>
<h4 id="指定数据库">指定数据库</h4>
<pre><code class="language-shell">mysqlbinlog -database #databaseName mysqld-bin.000001
</code></pre>
<h4 id="格式化">格式化</h4>
<pre><code class="language-shell">mysqlbinlog --base64-output=decode-rows -v mysqld-bin.000001
# 或者
mysqlbinlog --base64-output=decode-rows -vv mysqld-bin.000001
</code></pre>
<h4 id="获取指定时间段">获取指定时间段</h4>
<pre><code class="language-shell"># [start_datetime,stop_datetime)
mysqlbinlog --start-datetime=&quot;2017-08-16 10:00:00&quot; --stop-datetime=&quot;2017-01-09 18:00:00&quot; mysqld-bin.000001
</code></pre>
<h3 id="三-结合grep命令">三、结合grep命令</h3>
<pre><code class="language-shell"># 临时文件
mysqlbinlog --base64-output=decode-rows -v mysqld-bin.000001 &gt; temp.sql

# 找出匹配'tableName'的sql 
grep -w tableName temp.sql &gt; output.sql
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[随谈Java - （三）对象的生命周期]]></title>
        <id>https://marszfcai.github.io/post/java-object-lifecycle</id>
        <link href="https://marszfcai.github.io/post/java-object-lifecycle">
        </link>
        <updated>2019-12-21T04:34:57.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍对象的生命周期</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍对象的生命周期</p>
<!-- more -->
<h5 id="1-类加载">1、类加载</h5>
<ul>
<li>类加载器将类信息加载到JVM的内存（方法区）</li>
<li>为静态变量分配内存并赋零值，常量则直接赋值</li>
<li>如果符合以下情况则执行类的初始化方法：为静态变量赋值、执行静态代码块
<ul>
<li>通过new关键字实例化对象、读取或设置类的静态变量、调用类的静态方法</li>
<li>通过反射方式执行以上三种行为</li>
<li>初始化子类的时候会触发父类的初始化</li>
<li>作为程序的入口直接运行（main方法）</li>
</ul>
</li>
</ul>
<blockquote>
<p>注1：可使用javap -c 可以看出JVM会把静态变量的赋值合并到静态代码块<br>
注2：如果直接使用类加载器加载类不会触发执行类的初始化方法</p>
</blockquote>
<pre><code>&gt; 追踪类加载的参数
1）-XX:+TraceClassLoading：加载
2）-XX:+TraceClassUnloading：卸载
3）-verbose:class：等价于上面两个
</code></pre>
<h5 id="2-创建对象">2、创建对象</h5>
<ul>
<li>为成员变量分配内存并赋零值</li>
<li>执行对象的初始化方法：为变量赋值，执行普通代码块，执行构造方法</li>
</ul>
<blockquote>
<p>注：可使用javap -c 可以看出JVM会把成员变量的赋值、普通代码块合并到构造方法（重载的构造方法也会）</p>
</blockquote>
<h5 id="3-gc">3、GC</h5>
<ul>
<li>可达性检测</li>
<li>执行finalize()方法</li>
<li>回收</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[随谈Java - （二）内存区域]]></title>
        <id>https://marszfcai.github.io/post/jvm-memspace-introduction</id>
        <link href="https://marszfcai.github.io/post/jvm-memspace-introduction">
        </link>
        <updated>2019-12-21T04:33:27.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍JVM内存区域各部分作用</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍JVM内存区域各部分作用</p>
<!-- more -->
<h4 id="一-jvm内存区域规范">一、JVM内存区域规范</h4>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/3688070-375474963be16c8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></figure>
<h5 id="11-各区域作用">1.1 各区域作用</h5>
<p><strong>Java方法栈</strong>：以栈的形式存放栈帧，每一个Java方法调用的开始和结束，都伴随着栈帧的入栈和出栈；</p>
<p><strong>本地方法栈</strong>：与Java方法栈类似，对应native方法；</p>
<p><strong>堆</strong>：存放对象实例信息；</p>
<p><strong>方法区</strong>：主要存放类相关信息；</p>
<p><strong>程序计数器</strong>：记录当前线程代码执行的位置，线程上下文切换时用到；</p>
<blockquote>
<p>注：堆、方法区是线程共享的区域</p>
</blockquote>
<h5 id="12-hotspot各代对象">1.2 HotSpot各代对象</h5>
<p><strong>Eden/S1/S2</strong>：复制算法应用，存放年轻代对象</p>
<p><strong>Old</strong>：标记-清除/标记-整理算法应用，存放老年代对象以及做担保分配</p>
<h4 id="二-new关键字生成对象的简化过程">二、new关键字生成对象的简化过程</h4>
<p>1.由类加载器将类的二进制字节流加载至内存，并转化为相应的数据结构，存放在<strong>方法区</strong></p>
<p>2.执行&lt;clinit&gt;()方法进行<strong>类初始化</strong></p>
<blockquote>
<p>注：1、2步前会先进行类加载检查，如果之前已经加载过了则不再加载</p>
</blockquote>
<p>3.<strong>堆</strong>内给对象实例分配内存</p>
<p>4.执行&lt;init&gt;()方法进行<strong>实例初始化</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[随谈Java - （一）类文件结构]]></title>
        <id>https://marszfcai.github.io/post/java-class-keywords-introduction</id>
        <link href="https://marszfcai.github.io/post/java-class-keywords-introduction">
        </link>
        <updated>2019-12-21T04:31:12.000Z</updated>
        <summary type="html"><![CDATA[<p>介绍Java类个关键字作用</p>
]]></summary>
        <content type="html"><![CDATA[<p>介绍Java类个关键字作用</p>
<!-- more -->
<h4 id="1package">（1）package</h4>
<h4 id="2import">（2）import</h4>
<p><strong>作用</strong>：编译时期编译器搜索查找并补全代码中省略的类全名</p>
<pre><code class="language-java">// 不使用import
public void test() {
    java.util.ArrayList list = new java.util.ArrayList();
}

// 使用import
import java.util.ArrayList;

public void test() {
    ArrayList list = new ArrayList();
}
</code></pre>
<h4 id="3类声名">（3）类声名</h4>
<table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>abstract</td>
<td>抽象类,不可被实例化</td>
</tr>
<tr>
<td>final</td>
<td>不可被子类继承</td>
</tr>
<tr>
<td>strictfp</td>
<td>精确浮点计算</td>
</tr>
</tbody>
</table>
<h4 id="4变量">（4）变量</h4>
<table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>static</td>
<td>不需要实例化类对象即可访问</td>
</tr>
<tr>
<td>transient</td>
<td>该变量不会被序列化和反序列化 ( 注：static的变量也不会被序列化和反序列化 )</td>
</tr>
<tr>
<td>volatile</td>
<td>保证内存可见性、禁止指令重排序</td>
</tr>
<tr>
<td>final</td>
<td>表示该变量为常量,只可以被初始化一次,且赋值之后不可改变</td>
</tr>
</tbody>
</table>
<h4 id="5方法">（5）方法</h4>
<table>
<thead>
<tr>
<th>关键字</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>static</td>
<td>不需要实例化类对象即可调用</td>
</tr>
<tr>
<td>final</td>
<td>不可被子类重写覆盖</td>
</tr>
<tr>
<td>abstract</td>
<td>相当于接口方法,没有方法体,但有抽象方法的类必须声明为抽象类</td>
</tr>
<tr>
<td>synchronized</td>
<td>同步锁</td>
</tr>
<tr>
<td>strictfp</td>
<td>精确浮点计算</td>
</tr>
<tr>
<td>native</td>
<td>本地方法(C++方法)</td>
</tr>
</tbody>
</table>
<h4 id="6代码块">（6）代码块</h4>
<p><strong>普通代码块</strong>: 也称作构造代码块,在类实例化的时候调用,优先于构造函数执行</p>
<p><strong>静态代码块</strong>: 类加载即执行,只加载一次</p>
<h4 id="7内部类">（7）内部类</h4>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JDK8--元空间(Metaspace)替换永久代(PermGen)]]></title>
        <id>https://marszfcai.github.io/post/jdk8-metaspace-to-permgen</id>
        <link href="https://marszfcai.github.io/post/jdk8-metaspace-to-permgen">
        </link>
        <updated>2019-10-03T01:42:52.000Z</updated>
        <summary type="html"><![CDATA[<p>JDK8起，Hotspot JVM 废弃永久代（PermGen），同时将类元数据存储在本地内存，称之为元空间（Metaspace），而字符串常量池以及类的静态变量则存储在堆区。</p>
]]></summary>
        <content type="html"><![CDATA[<p>JDK8起，Hotspot JVM 废弃永久代（PermGen），同时将类元数据存储在本地内存，称之为元空间（Metaspace），而字符串常量池以及类的静态变量则存储在堆区。</p>
<!-- more -->
<h2 id="为什么要废弃永久代">为什么要废弃永久代</h2>
<ul>
<li>新类元数据的分配将受可用本机内存量的限制，而不是固定的由-XX：MaxPermSize参数指定的值，无论是默认值还是在命令行中指定的值。</li>
<li>简化 Full GC 的前置（JEP 156）</li>
<li>合并JRockit的一部分，JRockit没有永久代</li>
</ul>
<blockquote>
<p><em><strong>注意：</strong></em> 将字符串常量池和类静态变量移至Java堆可能会导致内存不足异常或GC数量增加。用户可能需要对-Xmx进行一些调整。</p>
</blockquote>
<h2 id="什么是元空间metaspace">什么是元空间（metaspace）</h2>
<p>元空间是VM用于存储类的元数据的一块非堆空间的本地内存</p>
<h2 id="什么时候分配内存allocate">什么时候分配内存（allocate）</h2>
<p>加载类的时候由类加载器分配</p>
<figure data-type="image" tabindex="1"><img src="https://marszfcai.github.io/post-images/1570274629159.png" alt=""></figure>
<h2 id="什么时候释放内存release">什么时候释放内存（release）</h2>
<p><em>卸载类加载器时释放内存，即发生在以下步骤之后才会释放</em></p>
<ul>
<li>所有该类加载器加载的所有类<strong>没有存活的实例</strong></li>
<li><strong>没有引用</strong>指向该类加载器及其加载的类</li>
<li>该类加载器及其加载的类正常GC</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://marszfcai.github.io/post-images/1570274674175.png" alt=""></figure>
<blockquote>
<p><em><strong>注意：</strong></em> “释放内存”不代表将内存返回给OS，该内存全部或一部分继续保留在JVM中，可以将其重用于将来的类加载。不完全释放内存给OS就会造成碎片的产生，所以使用Metaspace会造成碎片，导致内存浪费</p>
</blockquote>
<h2 id="相关vm参数">相关VM参数</h2>
<ul>
<li>-XX:MetaspaceSize=${limit}：触发GC的阈值</li>
<li>-XX:MaxMetaspaceSize=${limit}：Metaspace的最大值，超过则OOM（默认受本机内存大小限制）</li>
<li>-XX:+UseCompressedOops：开启压缩对象指针（oops：ordinary object pointers）</li>
<li>-XX:+UseCompressedClassPointers：开启压缩类指针（默认打开）</li>
<li>-XX:CompressedClassSpaceSize：压缩类空间的大小，超过则OOM（仅当开启压缩类指针时生效、默认1G）</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="http://openjdk.java.net/jeps/122">官方说明 JEP122</a></li>
<li><a href="https://www.cnblogs.com/yulei126/p/6777323.html">JDK8-废弃永久代（PermGen）迎来元空间（Metaspace）</a></li>
<li><a href="https://www.cnblogs.com/williamjie/p/9558094.html">Metaspace 之一：Metaspace整体介绍（永久代被替换原因、元空间特点、元空间内存查看分析方法）</a></li>
<li><a href="https://mp.weixin.qq.com/s/jqfppqqd98DfAJHZhFbmxA">JVM参数MetaspaceSize的误解</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1356779">MetaspaceSize和MaxMetaspaceSize的理解</a></li>
<li><a href="https://stuefe.de/tags/metaspace/">stuefe.de系列文章</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java8 CompletableFuture指北]]></title>
        <id>https://marszfcai.github.io/post/java8-completablefuture-quick-start</id>
        <link href="https://marszfcai.github.io/post/java8-completablefuture-quick-start">
        </link>
        <updated>2019-05-23T04:27:29.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="一-java-异步处理的演变">一、JAVA 异步处理的演变</h2>
<h4 id="11-future">1.1 Future</h4>
<p>JDK 5引入了Future模式。Future模式是多线程设计常用的一种设计模式。Future模式可以理解成：我有一个任务，提交给了Future，Future替我完成这个任务。期间可以去做其他事情，一段时间之后，我便可以从Future那儿取出结果。Future接口是Java多线程Future模式的实现，在java.util.concurrent包中，可以来进行异步计算。</p>
<p>一般情况下，我们会结合Callable接口和Future接口一起使用，通过ExecutorService的submit方法执行Callable，并返回Future。</p>
<p>以下代码模拟了电商加载商品详情页面的过程。</p>
<pre><code class="language-java">public void renderPage(CharSequence source) {
List&lt;ImageInfo&gt; info = scanForImageInfo(source);
// create Callable representing download of all images
final Callable&lt;List&lt;ImageData&gt;&gt; task = () -&gt;
  info.stream()
    	.map(ImageInfo::downloadImage)
    	.collect(Collectors.toList());
	// submit download task to the executor
	Future&lt;List&lt;ImageData&gt;&gt; images = executor.submit(task);
	renderText(source);
try {
   // get all downloaded images (blocking until all are available)
   final List&lt;ImageData&gt; imageDatas = images.get();
   // render images
   imageDatas.forEach(this::renderImage);
} catch (InterruptedException e) {
   // Re-assert the thread’s interrupted status
   Thread.currentThread().interrupt();
   // We don’t need the result, so cancel the task too
   images.cancel(true);
} catch (ExecutionException e) {
  throw launderThrowable(e.getCause()); }
}
</code></pre>
<p><code>Callable</code>表示下载页面所有图像的任务集合提交给Executor执行，该Executor返回Future，通过这些Future，可以查询下载任务的状态。当主线程完成渲染页面的文本时，它会调用<code>Future.get()</code>方法，直到所有下载的结果<code>List&lt;ImageData&gt;</code>完全可用为止。</p>
<p>以上代码明显的缺点是Future.get()方法是阻塞的，在所有下载完成之前，页面没有图像可用于渲染。</p>
<h4 id="12-completionservice">1.2 CompletionService</h4>
<p>使用CompletionService的一大改进就是把多个图片的加载分发给多个工作单元进行处理</p>
<pre><code class="language-java">public void renderPage(CharSequence source) { 
  List&lt;ImageInfo&gt; info = scanForImageInfo(source); 
  CompletionService&lt;ImageData&gt; completionService = 
    new ExecutorCompletionService&lt;&gt;(executor); 
  // submit each download task to the completion service 
  info.forEach(imageInfo -&gt; 
    completionService.submit(imageInfo::downloadImage)); 
  renderText(source); 
  // retrieve each RunnableFuture as it becomes 
  // available (and when we are ready to process it). 
  for (int t = 0; t &lt; info.size(); t++) { 
    Future&lt;ImageData&gt; imageFuture = completionService.take(); 
    renderImage(imageFuture.get()); 
  } 
}
</code></pre>
<h4 id="13-completablefuture">1.3 CompletableFuture</h4>
<p>CompletableFuture能够将回调放到与任务不同的线程中执行，也能将回调作为继续执行的同步函数，在与任务相同的线程中执行。它避免了传统回调最大的问题，那就是能够将控制流分离到不同的事件处理器中。</p>
<pre><code class="language-java">public void renderPage(CharSequence source) { 
        List&lt;ImageInfo&gt; info = scanForImageInfo(source); 
        info.forEach(imageInfo -&gt; 
               CompletableFuture 
       		.supplyAsync(imageInfo::downloadImage) 
       		.thenAccept(this::renderImage)); 
        renderText(source); 
 }
</code></pre>
<h2 id="二-completablefuture相关api">二、CompletableFuture相关API</h2>
<h4 id="21-声明任务-runasync-supplyasync">2.1 声明任务 - runAsync()、supplyAsync()</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CompletableFuture runAsync(Runnable runnable)</td>
<td>使用默认的线程池执行无返回值的异步任务</td>
</tr>
<tr>
<td>&lt;U&gt; CompletableFuture&lt;U&gt; supplyAsync(Supplier supplier)</td>
<td>使用默认的线程池执行有返回值的异步任务</td>
</tr>
</tbody>
</table>
<h4 id="22-获取结果-get-join">2.2 获取结果 - get()、join()</h4>
<table>
<thead>
<tr>
<th><strong>方法名</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>T get() throws InterruptedException, ExecutionException</td>
<td>阻塞等待异步任务完成</td>
</tr>
<tr>
<td>T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException</td>
<td>阻塞等待异步任务完成，并指定任务超时时间，如果超时，则抛出TimeoutException</td>
</tr>
<tr>
<td>T join()</td>
<td>阻塞等待异步任务完成</td>
</tr>
</tbody>
</table>
<h4 id="23-手动结束-complete-completeexceptionally">2.3 手动结束 - complete()、completeExceptionally()</h4>
<table>
<thead>
<tr>
<th><strong>方法名</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>boolean complete(T t)</td>
<td>手动完成异步任务，并指定任务的返回结果</td>
</tr>
<tr>
<td>boolean completeExceptionally(Throwable ex)</td>
<td>手动完成异步任务，并抛出异常</td>
</tr>
</tbody>
</table>
<h4 id="24-转换结果-thenapply-thencompose">2.4 转换结果 - thenApply()、thenCompose()</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;U&gt; CompletableFuture&lt;U&gt; thenApply(Function&lt;? super T,? extends U&gt; fn)</td>
<td>将执行结果交由指定Function转换</td>
</tr>
<tr>
<td>&lt;U&gt; CompletableFuture&lt;U&gt; thenCompose(Function&lt;? super T, ? extends CompletionStage&lt;U&gt;&gt; fn)</td>
<td>将执行结果交由指定Function转换</td>
</tr>
</tbody>
</table>
<pre><code class="language-java">/** 
 * thenApply() 相当于Stream.map()、thenCompose()相当于Stream.flatMap()
 * thenCompose() 是为了避免 CompletableFuture&lt;CompletableFuture&lt;U&gt;&gt; 式的返回结果
 */
// thenApply()
CompletableFuture&lt;CompletableFuture&lt;String&gt;&gt; future = 
    CompletableFuture.supplyAsync(() -&gt; &quot;Hello&quot;)
            .thenApply(result -&gt; CompletableFuture.supplyAsync(() -&gt; result + &quot;World&quot;));
// thenCompose()
CompletableFuture&lt;String&gt; future = 
    CompletableFuture.supplyAsync(() -&gt; &quot;Hello&quot;)
            .thenCompose(result -&gt; CompletableFuture.supplyAsync(() -&gt; result + &quot;World&quot;));
</code></pre>
<h4 id="25-组合结果-thencombine-thenacceptboth">2.5 组合结果 - thenCombine()、thenAcceptBoth()</h4>
<table>
<thead>
<tr>
<th><strong>方法名</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>&lt;U,V&gt; CompletableFuture thenCombine(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)</td>
<td>并行执行任务other，并用fn组合并转换两个任务的结果</td>
</tr>
<tr>
<td>&lt;U&gt; CompletableFuture thenAcceptBoth(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T, ? super U&gt; action)</td>
<td>并行执行任务other，并用fn组合两个任务的结果，仅消费，无返回值</td>
</tr>
</tbody>
</table>
<pre><code class="language-java">/**
 * thenCombine() 与 thenAcceptBoth() 都是并行执行两个任务，并对两个任务的结果进行组合
 * thenAcceptBoth()对于结果只是纯消费
 */
// thenCombine()
CompletableFuture&lt;String&gt; task1 = 
    CompletableFuture.supplyAsync(() -&gt; &quot;Hello&quot;)
            .thenCombine(CompletableFuture.supplyAsync(() -&gt; &quot;World&quot;), (r1, r2) -&gt; r1 + r2);
// thenAcceptBoth()
CompletableFuture&lt;Void&gt; task2 = 
	CompletableFuture.supplyAsync(() -&gt; &quot;Hello&quot;)
            .thenAcceptBoth(CompletableFuture.supplyAsync(() -&gt; &quot;World&quot;), (r1, r2) -&gt; System.out.println(r1 + r2));
</code></pre>
<h4 id="26-处理结果-whencomplete-handle-thenaccept-thenrun">2.6 处理结果 - whenComplete()、handle()、thenAccept()、thenRun()</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CompletableFuture whenComplete(BiConsumer&lt;? super T, ? super Throwable&gt; action)</td>
<td>消费结果，可处理异常</td>
</tr>
<tr>
<td>&lt;U&gt; CompletableFuture&lt;U&gt; handle(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)</td>
<td>转换结果，可处理异常</td>
</tr>
<tr>
<td>CompletionStage thenAccept(Consumer&lt;? super T&gt; action)</td>
<td>消费结果</td>
</tr>
<tr>
<td>CompletableFuture thenRun(Runnable action)</td>
<td>不消费结果，任务结果后执行action</td>
</tr>
</tbody>
</table>
<pre><code class="language-java">/**
 * whenComplete() 和 handle() 都能捕获异步任务的异常，并针对异常进行结果处理
 * whenComplete() 只消费结果，handle() 可以转换结果
 * thenAccept() 只消费结果
 */
CompletableFuture.supplyAsync(() -&gt; &quot;Hello&quot;)
            .whenComplete((result, ex) -&gt; System.out.println(result))
            .handle((result, ex) -&gt; result.concat(&quot; World&quot;))
            .thenAccept(System.out::println);
</code></pre>
<h4 id="27-时间优先度执行-accepteither-applytoeither-runaftereither">2.7 时间优先度执行 - acceptEither()、applyToEither()、runAfterEither()</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CompletableFuture acceptEither(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)</td>
<td>对首先返回的任务结果进行消费</td>
</tr>
<tr>
<td>&lt;U&gt; CompletableFuture&lt;U&gt; applyToEither(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T, U&gt; fn)</td>
<td>对首先返回的任务结果进行转换</td>
</tr>
<tr>
<td>CompletableFuture runAfterEither(CompletionStage&lt;?&gt; other, Runnable action)</td>
<td>不消费结果，任意一个任务执行完毕即执行action</td>
</tr>
</tbody>
</table>
<h4 id="28-工厂方法-allof-anyof">2.8 工厂方法 - allOf()、anyOf()</h4>
<table>
<thead>
<tr>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>static CompletableFuture allOf(CompletableFuture&lt;?&gt;… cfs)</td>
<td>当所有任务完成后，返回一个新的completed状态的CompletableFuture</td>
</tr>
<tr>
<td>static CompletableFuture anyOf(CompletableFuture&lt;?&gt;… cfs)</td>
<td>当任意一个任务完成后，返回一个新的completed状态的CompletableFuture</td>
</tr>
</tbody>
</table>
<h2 id="三-示例">三、示例</h2>
<h4 id="31-指定异步任务超时时间">3.1 指定异步任务超时时间</h4>
<pre><code class="language-java">// 某任务需要时间 但是最大的可接受时间为2s 2s后如果任务未完成则抛出TimeoutException并使用默认值结果
CompletableFuture.supplyAsync(() -&gt; getSomething())
                 .applyToEither(timeoutAfter(2, TimeUnit.SECONDS), Function.identity())
    			 .exceptionally(ex -&gt; defaultValue())
    			 .thenAccept(something -&gt; doAfterGet(something));
// timeoutAfter() 实现
public &lt;T&gt; CompletableFuture&lt;T&gt; timeoutAfter(long timeout, TimeUnit unit) {
    CompletableFuture&lt;T&gt; result = new CompletableFuture&lt;T&gt;();
    delayer.schedule(() -&gt; result.completeExceptionally(new TimeoutException()), timeout, unit);
    return result;
}
</code></pre>
<h4 id="32-小示例">3.2 小示例</h4>
<pre><code class="language-java">// 声明任务集合
List&lt;CompletableFuture&gt; tasks = new ArrayList&lt;&gt;(5);
// 根据条件创建任务
Optional&lt;CompletableFuture&lt;U&gt;&gt; optionalTask = Optional.ofNullable(taskService.createTask(params));
// 如果任务创建成功 则处理任务结果：转换、消费 ..
optionalTask.ifPresent(optionalTask -&gt;
    tasks.add(optionalTask
        .thenApplyAsync(firstResult -&gt; {
            convert(firstResult)
        })
        .thenAcceptAsync(finalResult -&gt; {
            dosomething(finalResult)
        })
    )
);
// 声明其他任务
...
// 获取结果
if(!CollectionUtils.isEmpty(tasks)) {
   CompletableFuture[] taskArray = tasks.toArray(new CompletableFuture[tasks.size()]);
   CompletableFuture.allOf(taskArray).join();
}
</code></pre>
<h2 id="四-参考文章">四、参考文章</h2>
<ul>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA4MTA1NjM5NQ==&amp;mid=2247484018&amp;idx=1&amp;sn=7efd342d969b668a54dc48f6161d64ae&amp;chksm=9f9b8596a8ec0c80e8de2f31ac5777c4b92931abe2a4a6196c865cbee35138cfe182de0bd84b&amp;mpshare=1&amp;scene=1&amp;srcid=0323EvtmfSTcX9tjOKXQChnF&amp;key=0003dccb1bc0f2930fc8a42bf2750bbdcabdd13e795dc1560efda8195770e24d35c594a21471bebf21a30b0b25c7358ad247aa8ddfd6103d82225b1df7505d5ca86108a56635e87a3ecc88be28188145&amp;ascene=0&amp;uin=NjY1MTc3NzYx&amp;devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;lang=zh_CN&amp;fontScale=100&amp;pass_ticket=2i4WI5zbZ55O0BKYZ7n4URcc7dMZUAw50Pb4X2rXds2j6TMvkZp6cGMfzKj%2FfiX3">Java8新的异步编程方式 CompletableFuture(一)</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA4MTA1NjM5NQ==&amp;mid=2247484022&amp;idx=1&amp;sn=7d8142c14e24dc5c795b1149aa8b39ca&amp;chksm=9f9b8592a8ec0c849a46be086e7012b4d6b1216e48069b108ee601d4b0032f413bc2322afe6c&amp;mpshare=1&amp;scene=1&amp;srcid=0323mpja9tLCMrZAHMg8Hv3B&amp;key=5c9df8bf97da386f22c3faceef55503fae3d6fbca6e8d3683070bfefef0c6d90c4e768f0359a6a5ca031650c50a6553395d73923302e12283a90295f8b29a7fa4d4aa1f42041d8baa8f1ac73e775cc69&amp;ascene=0&amp;uin=NjY1MTc3NzYx&amp;devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;lang=zh_CN&amp;fontScale=100&amp;pass_ticket=2i4WI5zbZ55O0BKYZ7n4URcc7dMZUAw50Pb4X2rXds2j6TMvkZp6cGMfzKj%2FfiX3">Java8新的异步编程方式 CompletableFuture(二)</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA4MTA1NjM5NQ==&amp;mid=2247484026&amp;idx=1&amp;sn=8a8a4082cec8a8f52fd01c51db27a530&amp;chksm=9f9b859ea8ec0c889f5da5297398f4568c2a1fffe4224dff5575f3dd122b53cda1224f6bd36b&amp;mpshare=1&amp;scene=1&amp;srcid=0323X8ijh8Aqluju28aMPb44&amp;key=0003dccb1bc0f29346fbbaf3796917200f118804b31b1d75fb8666b280dae1e456a9127e66639abc65ea853797d53e6413e1592a9e38c1b36c47e0c0aaf29c4fe1cecdea670e78b1fbd7829071e0d9d7&amp;ascene=0&amp;uin=NjY1MTc3NzYx&amp;devicetype=iMac+MacBookPro9%2C2+OSX+OSX+10.12.4+build(16E195)&amp;version=12020610&amp;nettype=WIFI&amp;lang=zh_CN&amp;fontScale=100&amp;pass_ticket=2i4WI5zbZ55O0BKYZ7n4URcc7dMZUAw50Pb4X2rXds2j6TMvkZp6cGMfzKj%2FfiX3">Java8新的异步编程方式 CompletableFuture(三)</a></p>
</li>
<li>
<p><a href="https://www.infoq.com/articles/Functional-Style-Callbacks-Using-CompletableFuture">Functional-Style Callbacks Using Java 8’s CompletableFuture</a></p>
</li>
<li>
<p><a href="http://iteratrlearning.com/java9/2016/09/13/java9-timeouts-completablefutures.html">Asynchronous timeouts with CompletableFutures in Java 8 and Java 9</a></p>
</li>
<li>
<p><a href="http://www.marccarre.com/2016/05/08/java-8-concurrency-completablefuture-in-practice.html">Java 8 Concurrency - CompletableFuture in practice</a></p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[禁用WSL的shell提示音]]></title>
        <id>https://marszfcai.github.io/post/disable_wsl_shell_bell</id>
        <link href="https://marszfcai.github.io/post/disable_wsl_shell_bell">
        </link>
        <updated>2018-10-13T04:05:30.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h4 id="bash">bash</h4>
<p>1.<code>sudo vi /etc/inputrc</code><br>
2.取消注释 <code>set bell-style none</code><br>
3.退出重启</p>
<h4 id="zsh">zsh</h4>
<p>1.<code>sudo vi ~/.zshrc</code><br>
2.文件末尾添加<code>unsetopt beep</code><br>
3.<code>source ~/.zshrc</code></p>
]]></content>
    </entry>
</feed>