<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marszfcai.github.io</id>
    <title>Marszfcai</title>
    <updated>2019-10-05T11:25:21.634Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://marszfcai.github.io"/>
    <link rel="self" href="https://marszfcai.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://marszfcai.github.io/images/avatar.png</logo>
    <icon>https://marszfcai.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Marszfcai</rights>
    <entry>
        <title type="html"><![CDATA[JDK8--元空间(Metaspace)替换永久代(PermGen)]]></title>
        <id>https://marszfcai.github.io/post/jdk8-metaspace-to-permgen</id>
        <link href="https://marszfcai.github.io/post/jdk8-metaspace-to-permgen">
        </link>
        <updated>2019-10-03T01:42:52.000Z</updated>
        <summary type="html"><![CDATA[<p>JDK8起，Hotspot JVM 废弃永久代（PermGen），同时将类元数据存储在本地内存，称之为元空间（Metaspace），而字符串常量池以及类的静态变量则存储在堆区。</p>
]]></summary>
        <content type="html"><![CDATA[<p>JDK8起，Hotspot JVM 废弃永久代（PermGen），同时将类元数据存储在本地内存，称之为元空间（Metaspace），而字符串常量池以及类的静态变量则存储在堆区。</p>
<!-- more -->
<h2 id="为什么要废弃永久代">为什么要废弃永久代</h2>
<ul>
<li>新类元数据的分配将受可用本机内存量的限制，而不是固定的由-XX：MaxPermSize参数指定的值，无论是默认值还是在命令行中指定的值。</li>
<li>简化 Full GC 的前置（JEP 156）</li>
<li>合并JRockit的一部分，JRockit没有永久代</li>
</ul>
<blockquote>
<p><em><strong>注意：</strong></em> 将字符串常量池和类静态变量移至Java堆可能会导致内存不足异常或GC数量增加。用户可能需要对-Xmx进行一些调整。</p>
</blockquote>
<h2 id="什么是元空间metaspace">什么是元空间（metaspace）</h2>
<p>元空间是VM用于存储类的元数据的一块非堆空间的本地内存</p>
<h2 id="什么时候分配内存allocate">什么时候分配内存（allocate）</h2>
<p>加载类的时候由类加载器分配</p>
<figure data-type="image" tabindex="1"><img src="https://marszfcai.github.io/post-images/1570274629159.png" alt=""></figure>
<h2 id="什么时候释放内存release">什么时候释放内存（release）</h2>
<p><em>卸载类加载器时释放内存，即发生在以下步骤之后才会释放</em></p>
<ul>
<li>所有该类加载器加载的所有类<strong>没有存活的实例</strong></li>
<li><strong>没有引用</strong>指向该类加载器及其加载的类</li>
<li>该类加载器及其加载的类正常GC</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://marszfcai.github.io/post-images/1570274674175.png" alt=""></figure>
<blockquote>
<p><em><strong>注意：</strong></em> “释放内存”不代表将内存返回给OS，该内存全部或一部分继续保留在JVM中，可以将其重用于将来的类加载。不完全释放内存给OS就会造成碎片的产生，所以使用Metaspace会造成碎片，导致内存浪费</p>
</blockquote>
<h2 id="相关vm参数">相关VM参数</h2>
<ul>
<li>-XX:MetaspaceSize=${limit}：触发GC的阈值</li>
<li>-XX:MaxMetaspaceSize=${limit}：触发Full GC的阈值</li>
<li>-XX:+UseCompressedOops：开启压缩对象指针（oops：ordinary object pointers）</li>
<li>-XX:+UseCompressedClassPointers：开启压缩类指针</li>
<li>-XX:CompressedClassSpaceSize：仅当开启压缩类指针时生效</li>
</ul>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="http://openjdk.java.net/jeps/122">官方说明 JEP122</a></li>
<li><a href="https://www.cnblogs.com/yulei126/p/6777323.html">JDK8-废弃永久代（PermGen）迎来元空间（Metaspace）</a></li>
<li><a href="https://www.cnblogs.com/williamjie/p/9558094.html">Metaspace 之一：Metaspace整体介绍（永久代被替换原因、元空间特点、元空间内存查看分析方法）</a></li>
<li><a href="https://mp.weixin.qq.com/s/jqfppqqd98DfAJHZhFbmxA">JVM参数MetaspaceSize的误解</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1356779">MetaspaceSize和MaxMetaspaceSize的理解</a></li>
<li><a href="https://stuefe.de/tags/metaspace/">stuefe.de系列文章</a></li>
</ul>
]]></content>
    </entry>
</feed>